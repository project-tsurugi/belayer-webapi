plugins {
	id 'org.springframework.boot' version '2.7.18'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'java'
	id 'jacoco'
	id 'com.github.jk1.dependency-license-report' version '2.0'
}

group = 'com.tsurugidb.belayer'
def versionString = file('../VERSION').text.trim()
version = versionString
def tsubarkuro_version = '1.9.0'

def resolvedTsubakuroVersion = project.hasProperty('com.tsurugidb.tsubakuro.version')
	? project.getProperty('com.tsurugidb.tsubakuro.version')
	: tsubarkuro_version

ext {
	isReleaseVersion = !version.endsWith("SNAPSHOT")
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}

    all*.exclude module: 'spring-boot-starter-logging'

}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
    withSourcesJar()
    withJavadocJar()
}

javadoc.failOnError = false

if (hasProperty('mavenLocal')) {
	repositories {
		mavenLocal()
	}
} else {
	repositories {
		maven {
			url 'https://central.sonatype.com/repository/maven-snapshots/'
			content {
				includeGroupByRegex 'com\\.tsurugidb.*'
			}
		}
	}
}
repositories {
	mavenCentral()
}

configurations.all {
	resolutionStrategy.cacheChangingModulesFor 8, 'hours'
}

sourceSets {
    main {
        java {
		    include 'com/tsurugidb/**'
 		    include 'org/apache/commons/csv/**'
		}
    }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springdoc:springdoc-openapi-webflux-ui:1.6.8'
	implementation 'ch.qos.logback:logback-classic:1.2.11'
	implementation 'io.micrometer:micrometer-registry-prometheus'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.14.1'
	implementation 'org.apache.parquet:parquet-hadoop:1.12.3'
	implementation 'org.apache.hadoop:hadoop-common:3.3.4'
	implementation 'org.apache.hadoop:hadoop-client:3.3.4'
	implementation 'org.apache.commons:commons-csv:1.9.0'
	implementation "com.tsurugidb.tsubakuro:tsubakuro-session:${resolvedTsubakuroVersion}"
	implementation "com.tsurugidb.tsubakuro:tsubakuro-connector:${resolvedTsubakuroVersion}"
	implementation "com.tsurugidb.tsubakuro:tsubakuro-auth-http:${resolvedTsubakuroVersion}"
	implementation "com.tsurugidb.tsubakuro:tsubakuro-auth-mock:${resolvedTsubakuroVersion}"
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'io.projectreactor:reactor-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

jar {
	enabled = false
}

tasks.named('test') {
	useJUnitPlatform()
}
test {
	finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
}

task showTsubakuroManifest {
	doLast {
		def tsubakuroJar = configurations["compileClasspath"].filter {
			it.name.startsWith("tsubakuro-session")
		}
		def version = resources.text.fromArchiveEntry(tsubakuroJar, "META-INF/MANIFEST.MF")
		print(version.asString())
	}
}
