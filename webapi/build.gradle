plugins {
	id 'org.springframework.boot' version '2.6.6'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'jacoco'
	id 'maven-publish'
	id 'signing'
	id 'com.github.jk1.dependency-license-report' version '2.0'
}

group = 'com.tsurugidb.belayer'
def versionString = file('../VERSION').text.trim()
version = versionString

ext {
	isReleaseVersion = !version.endsWith("SNAPSHOT")
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}

    all*.exclude module: 'spring-boot-starter-logging'

}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
    withSourcesJar()
    withJavadocJar()
}

javadoc.failOnError = false

if (hasProperty('mavenLocal')) {
	repositories {
		mavenLocal()
	}
} else {
	repositories {
		maven {
			url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
			content {
				includeGroupByRegex 'com\\.tsurugidb.*'
			}
		}
	}
}
repositories {
	mavenCentral()
}

configurations.all {
	resolutionStrategy.cacheChangingModulesFor 8, 'hours'
}

sourceSets {
    main {
        java {
		    include 'com/tsurugidb/**'
 		    include 'org/apache/commons/csv/**'
		}
    }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springdoc:springdoc-openapi-webflux-ui:1.6.8'
	implementation 'ch.qos.logback:logback-classic:1.2.11'
	implementation 'io.micrometer:micrometer-registry-prometheus'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.14.1'
	implementation 'org.apache.parquet:parquet-hadoop:1.12.3'
	implementation 'org.apache.hadoop:hadoop-common:3.3.4'
	implementation 'org.apache.hadoop:hadoop-client:3.3.4'
	implementation 'org.apache.commons:commons-csv:1.9.0'
	implementation 'com.tsurugidb.tsubakuro:tsubakuro-session:1.0.0-SNAPSHOT'
	implementation 'com.tsurugidb.tsubakuro:tsubakuro-connector:1.0.0-SNAPSHOT'
	implementation 'com.tsurugidb.tsubakuro:tsubakuro-auth-http:1.0.0-SNAPSHOT'
	implementation 'com.tsurugidb.tsubakuro:tsubakuro-auth-mock:1.0.0-SNAPSHOT'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'io.projectreactor:reactor-test'
}

jar {
	enabled = false
}

tasks.named('test') {
	useJUnitPlatform()
}
test {
	finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
}

task showTsubakuroManifest {
	doLast {
		def tsubakuroJar = configurations["compileClasspath"].filter {
			it.name.startsWith("tsubakuro-session")
		}
		def version = resources.text.fromArchiveEntry(tsubakuroJar, "META-INF/MANIFEST.MF")
		print(version.asString())
	}
}

publishing {
    repositories {
        maven {
            name 'OSSRH'
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url isReleaseVersion ? releasesRepoUrl : snapshotsRepoUrl
            credentials {
                username findProperty('st.ossrh.user') ?: System.getenv('ST_OSSRH_USER')
                password findProperty('st.ossrh.password') ?: System.getenv('ST_OSSRH_PASSWORD')
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            artifact bootJar
            pom {
                name = 'Belayer Web-API'
                description = 'Runtime and library to access Tsurugi directly via REST API'
                url = 'https://github.com/project-tsurugi/belayer-webapi'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'project-tsurugi'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/project-tsurugi/belayer-webapi.git'
                    developerConnection = 'scm:git:https://github.com/project-tsurugi/belayer-webapi.git'
                    url = 'https://github.com/project-tsurugi/belayer-webapi'
                }
            }
        }
    }
}

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask(":${project.name}:publishMavenJavaPublicationToOSSRHRepository") }
    def signingKeyId = findProperty("signingKeyId")
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}
